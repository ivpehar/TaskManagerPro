@page "/add-task"
@using TaskManagerPro.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@inject TaskManagerProContext DbContext
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<h3>Dodaj zadatak</h3>

@if (saved)
{
    <div class="alert alert-success">Zadatak uspješno spremljen!</div>
    <button class="btn btn-secondary" @onclick="ResetForm">Dodaj novi zadatak</button>
}
else
{
    <EditForm EditContext="@editContext"
              OnValidSubmit="HandleValidSubmit"
              OnInvalidSubmit="HandleInvalidSubmit"
              FormName="addTaskForm">
        <DataAnnotationsValidator />
        @if (submitted)
        {
            <ValidationSummary />
        }
        <div class="mb-3">
            <label for="Title" class="form-label">Naslov</label>
            <InputText id="Title" class="form-control" @bind-Value="newTask.Title" />
        </div>
        <div class="mb-3">
            <label for="Description" class="form-label">Opis</label>
            <InputTextArea id="Description" class="form-control" @bind-Value="newTask.Description" />
        </div>
        <div class="mb-3">
            <label for="DueDate" class="form-label">Rok</label>
            <InputDate id="DueDate" class="form-control" @bind-Value="newTask.DueDate" />
        </div>
        <button type="submit" class="btn btn-primary">Spremi zadatak</button>
    </EditForm>
}

@code {
    // Zastavica koja označava je li forma već pokušana poslati (za prikaz validacijskih poruka)
    private bool submitted = false;
    // Zastavica koja označava da je zadatak uspješno spremljen
    private bool saved = false;

    // Inicijalni model – obavezna svojstva postavljena su na prazan string.
    private TaskItem newTask = new TaskItem
        {
            Title = string.Empty,
            Description = string.Empty,
            UserId = string.Empty
        };

    // Privremeno inicijaliziramo EditContext (nakon učitavanja stranice postavit ćemo pravi model)
    private EditContext editContext = new EditContext(new TaskItem { Title = string.Empty, Description = string.Empty, UserId = string.Empty });

    protected override async Task OnInitializedAsync()
    {
        // Dohvaćamo podatke o trenutnom korisniku te postavljamo UserId
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            newTask.UserId = UserManager.GetUserId(user)!;
        }
        editContext = new EditContext(newTask);
    }

    private async Task HandleValidSubmit()
    {
        submitted = true; // Označavamo da je korisnik pokušao poslati formu

        // Postavljamo vrijeme kreiranja i spremamo zadatak u bazu
        newTask.CreatedAt = DateTime.UtcNow;
        DbContext.Tasks.Add(newTask);
        await DbContext.SaveChangesAsync();

        // Označavamo da je zadatak uspješno spremljen – forma se više ne prikazuje odmah
        saved = true;
    }

    private void HandleInvalidSubmit()
    {
        // Ako forma nije validna (npr. polja prazna) prikazujemo validacijske poruke
        submitted = true;
    }

    private void ResetForm()
    {
        // Resetiramo zastavice
        submitted = false;
        saved = false;

        // Sačuvamo trenutni UserId, jer će ga nova instanca trebati
        var currentUserId = newTask.UserId;

        // Kreiramo novu instancu modela s praznim poljima, ali s postavljenim UserId-em
        newTask = new TaskItem
            {
                Title = string.Empty,
                Description = string.Empty,
                UserId = currentUserId
            };

        // Kreiramo novi EditContext za novi model
        editContext = new EditContext(newTask);
    }
}
