@page "/tasks"
@using TaskManagerPro.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject TaskManagerProContext DbContext
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@rendermode InteractiveServer

<h3 class="mb-4">🚀 Upravljanje Zadacima</h3>

<!-- Forma za dodavanje / uređivanje zadatka -->
<EditForm Model="@NewTask" OnValidSubmit="SaveTask">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">📌 Naslov</label>
        <InputText class="form-control" @bind-value="NewTask.Title" />
    </div>

    <div class="mb-3">
        <label class="form-label">📝 Opis</label>
        <InputTextArea class="form-control" @bind-value="NewTask.Description" />
    </div>

    <div class="mb-3">
        <label class="form-label">⏳ Rok</label>
        <InputDate TValue="DateTime?" class="form-control" @bind-value="NewTask.DueDate" />
    </div>

    <div class="mb-3">
        <label class="form-label">🔥 Prioritet</label>
        <select class="form-control" @bind="NewTask.Priority">
            <option value="Nizak">Nizak</option>
            <option value="Srednji">Srednji</option>
            <option value="Visok">Visok</option>
        </select>
    </div>

    <div class="mb-3">
        <label class="form-label">🏷️ Tagovi (odvojeni zarezima)</label>
        <InputText class="form-control" @bind-value="NewTask.Tags" />
    </div>

    <button type="submit" class="btn btn-success">
        @(EditingTaskId == null ? "Dodaj zadatak" : "Spremi izmjene")
    </button>

    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit" style="display: @(EditingTaskId == null ? "none" : "inline-block")">
        Odustani
    </button>
</EditForm>

<hr />

<!-- Prikaz svih zadataka -->
@if (tasks.Count == 0)
{
    <p class="text-muted">🚀 Nema zadataka. Dodajte prvi zadatak!</p>
}
else
{
    <div class="row">
        @foreach (var task in tasks)
        {
            <div class="col-md-6">
                <div class="card mb-3 @(task.IsCompleted ? "border-success" : task.Priority == "Visok" ? "border-danger" : "border-secondary")">
                    <div class="card-header d-flex justify-content-between">
                        <strong>@task.Title</strong>
                        <span class="badge @(task.Priority == "Visok" ? "bg-danger" : task.Priority == "Srednji" ? "bg-warning" : "bg-info")">@task.Priority</span>
                    </div>
                    <div class="card-body">
                        <p class="card-text text-muted">@task.Description</p>
                        @if (task.DueDate.HasValue)
                        {
                            <p class="card-text"><small class="text-muted">🗓️ Rok: @task.DueDate.Value.ToString("dd.MM.yyyy")</small></p>
                        }
                        <p class="card-text"><small class="text-muted">🏷️ Tagovi: @task.Tags</small></p>
                    </div>
                    <div class="card-footer d-flex justify-content-between">
                        <div>
                            <input type="checkbox" checked="@task.IsCompleted" @onchange="() => ToggleTaskCompletion(task)" />
                            <span class="ms-1 @(task.IsCompleted ? "text-success" : "")">@(task.IsCompleted ? "✅ Završeno" : "🔄 U tijeku")</span>
                        </div>
                        <div>
                            <button class="btn btn-primary btn-sm me-2" @onclick="() => EditTask(task)">✏️</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteTask(task.Id)">🗑️</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<TaskItem> tasks = new();
    private TaskItem NewTask { get; set; } = new TaskItem();
    private int? EditingTaskId = null;
    private string userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = UserManager.GetUserId(user) ?? "";

        if (!string.IsNullOrEmpty(userId))
        {
            tasks = await DbContext.Tasks
                .Where(t => t.UserId == userId)
                .OrderByDescending(t => t.Id)
                .ToListAsync();
        }
    }

    private async Task SaveTask()
    {
        if (string.IsNullOrWhiteSpace(NewTask.Title) || string.IsNullOrWhiteSpace(NewTask.Description))
        {
            return;
        }

        if (EditingTaskId == null)
        {
            NewTask.UserId = userId;
            NewTask.CreatedAt = DateTime.UtcNow;
            DbContext.Tasks.Add(NewTask);
            tasks.Insert(0, NewTask);
        }
        else
        {
            var task = tasks.FirstOrDefault(t => t.Id == EditingTaskId);
            if (task != null)
            {
                task.Title = NewTask.Title;
                task.Description = NewTask.Description;
                task.DueDate = NewTask.DueDate;
                task.Priority = NewTask.Priority;
                task.Tags = NewTask.Tags;
                DbContext.Tasks.Update(task);
            }
        }

        await DbContext.SaveChangesAsync();
        ResetForm();
    }

    private void EditTask(TaskItem task)
    {
        EditingTaskId = task.Id;
        NewTask = new TaskItem
            {
                Id = task.Id,
                Title = task.Title,
                Description = task.Description,
                DueDate = task.DueDate,
                Priority = task.Priority,
                Tags = task.Tags,
                UserId = task.UserId
            };
    }

    private void CancelEdit()
    {
        ResetForm();
    }

    private void ResetForm()
    {
        EditingTaskId = null;
        NewTask = new TaskItem();
    }

    private async Task ToggleTaskCompletion(TaskItem task)
    {
        task.IsCompleted = !task.IsCompleted;
        await DbContext.SaveChangesAsync();

        if (task.IsCompleted)
        {
            tasks.Remove(task);  // Makni ga s liste aktivnih zadataka
        }
    }


    private async Task DeleteTask(int id)
    {
        var task = await DbContext.Tasks.FindAsync(id);
        if (task != null)
        {
            DbContext.Tasks.Remove(task);
            await DbContext.SaveChangesAsync();
            tasks.Remove(task);
        }
    }
}
